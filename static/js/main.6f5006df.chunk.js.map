{"version":3,"sources":["logo.svg","Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","angle","Math","random","xPos","yPos","_transform","style","transform","this","src","img","className","Component","Deck","handleClick","a","url","state","deck_id","fetch","data","json","card","console","log","success","cards","image","setState","done","deck","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,mMCuB5BC,G,kBApBb,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJf,OAKjB,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QALiB,E,sEAQjB,OACE,6BACE,yBACEM,MAAO,CAAEC,UAAWC,KAAKH,YACzBI,IAAKD,KAAKT,MAAMW,IAChBC,UAAU,c,GAdDC,cC4CJC,E,YA3Cb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAYRe,YAbmB,sBAaL,kCAAAC,EAAA,6DACNC,EADM,kFAC2E,EAAKC,MAAMC,QADtF,mBAEOC,MAAMH,GAFb,cAENI,EAFM,gBAGOA,EAAKC,OAHZ,OAGNC,EAHM,OAIZC,QAAQC,IAAIF,EAAKG,SACbH,EAAKG,SACDf,EAAMY,EAAKI,MAAM,GAAGC,MAC1B,EAAKC,SAAS,CAAEF,MAAM,GAAD,mBAAM,EAAKT,MAAMS,OAAjB,CAAwB,kBAAC,EAAD,CAAMhB,IAAKA,SAExD,EAAKkB,SAAS,CAAEC,MAAM,IATZ,2CAVZ,EAAKZ,MAAQ,CAAES,MAAO,GAAIR,QAAS,GAAIW,MAAM,GAH5B,E,mNAMEV,MACjB,wF,cADIC,E,gBAGaA,EAAKC,O,OAAlBS,E,OACNtB,KAAKS,MAAMC,QAAUY,EAAKZ,Q,qIAgB1B,OACE,6BACE,wBAAIP,UAAU,SAAd,uBACA,wBAAIA,UAAU,YAAd,4BACEH,KAAKS,MAAMY,KAKX,mBAJA,4BAAQE,QAASvB,KAAKM,YAAaH,UAAU,OAA7C,gBAMDH,KAAKS,MAAMS,W,GAtCDd,aCUJoB,MARf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,QCKcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6f5006df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\r\nimport \"./Card.css\";\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let angle = Math.random() * 90 - 45;\r\n    let xPos = Math.random() * 40 - 20;\r\n    let yPos = Math.random() * 40 - 20;\r\n    this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img\r\n          style={{ transform: this._transform }}\r\n          src={this.props.img}\r\n          className=\"Card\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card.js\";\r\nclass Deck extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { cards: [], deck_id: \"\", done: false };\r\n  }\r\n  async componentDidMount() {\r\n    const data = await fetch(\r\n      \"https://cors-anywhere.herokuapp.com/https://deckofcardsapi.com/api/deck/new/shuffle/\"\r\n    );\r\n    const deck = await data.json();\r\n    this.state.deck_id = deck.deck_id;\r\n  }\r\n\r\n  handleClick = async () => {\r\n    const url = `https://cors-anywhere.herokuapp.com/https://deckofcardsapi.com/api/deck/${this.state.deck_id}/draw/`;\r\n    const data = await fetch(url);\r\n    const card = await data.json();\r\n    console.log(card.success);\r\n    if (card.success) {\r\n      const img = card.cards[0].image;\r\n      this.setState({ cards: [...this.state.cards, <Card img={img} />] });\r\n    } else {\r\n      this.setState({ done: true });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"title\">React Card Dealer! </h1>\r\n        <h2 className=\"subtitle\">A little demo with react</h2>\r\n        {!this.state.done ? (\r\n          <button onClick={this.handleClick} className=\"btn\">\r\n            Deal a card!\r\n          </button>\r\n        ) : (\r\n          \"ALL CARDS DEALT!\"\r\n        )}\r\n        {this.state.cards}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Deck;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Deck from \"./Deck.js\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}